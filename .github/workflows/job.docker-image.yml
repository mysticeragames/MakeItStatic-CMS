name: '[job] Docker image'

on:
  workflow_call:
    inputs:
      DOCKERHUB_USER:
        type: string
        default: rboonzaijer
      DOCKER_PUSH:
        type: number
        default: 0
      DOCKER_PUSH_LATEST:
        type: number
        default: 0
      TARGET_IMAGE_TAG:
        type: string
        default: "dev-${{ github.ref_name }}"
      TARGET_IMAGE_PROD:
        type: string
        default: mysticeragames/makeitstatic-cms
      TARGET_IMAGE_TEST:
        type: string
        default: mysticeragames/makeitstatic-cms-test

      # The build cache is used to cache Docker layers, used to speed up the build process
      TARGET_IMAGE_CACHE:
        type: string
        default: mysticeragames/makeitstatic-cms-buildcache
    secrets:
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:

    - name: Set variables
      id: vars
      # Remove special characters in tag name with sed
      run: |
        {
          echo "IMAGE_PROD=${{ inputs.TARGET_IMAGE_PROD }}:$( echo ${{ inputs.TARGET_IMAGE_TAG }} | sed 's|[^a-zA-Z0-9\\.\\-\\_]|-|g' | awk '{print tolower($0)}' )";
          echo "IMAGE_PROD_LATEST=${{ inputs.TARGET_IMAGE_PROD }}:latest";
          echo "IMAGE_TEST=${{ inputs.TARGET_IMAGE_TEST }}:$( echo ${{ inputs.TARGET_IMAGE_TAG }} | sed 's|[^a-zA-Z0-9\\.\\-\\_]|-|g' | awk '{print tolower($0)}' )";
          echo "IMAGE_BUILD_CACHE=${{ inputs.TARGET_IMAGE_CACHE }}:cache"
        } >> "$GITHUB_OUTPUT"

    - name: Debug variables
      run: |
        echo "IMAGE_PROD=${{ steps.vars.outputs.IMAGE_PROD }}"
        echo "IMAGE_PROD_LATEST=${{ steps.vars.outputs.IMAGE_PROD_LATEST }}"
        echo "IMAGE_TEST=${{ steps.vars.outputs.IMAGE_TEST }}"
        echo "IMAGE_BUILD_CACHE=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}"


      # Use a hash (commit) and not a short release-version to make sure it has not been tampered with
      # Release versions can easily be removed and re-uploaded. Hashes not so easily...
      # More info: https://blog.rafaelgss.dev/why-you-should-pin-actions-by-commit-hash
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # https://github.com/actions/checkout/releases/tag/v4.2.2



    - name: Login to Docker Hub
      uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # https://github.com/docker/login-action/releases/tag/v3.3.0
      with:
        username: ${{ inputs.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    # Is this needed??
    #- name: Set up QEMU
    #  uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # https://github.com/docker/setup-qemu-action/releases/tag/v3.3.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # https://github.com/docker/setup-buildx-action/releases/tag/v3.8.0



    - name: Build + cache test image (only linux/amd64)
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
      with:
        load: true
        target: final_test
        tags: ${{ steps.vars.outputs.IMAGE_TEST }}
        platforms: linux/amd64
        cache-from: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-test_linux_amd64
        cache-to: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-test_linux_amd64,mode=max



    - name: Run tests (linux/amd64)
      #id: tests
      timeout-minutes: 5
      run: |
        docker images ${{ steps.vars.outputs.IMAGE_TEST }}
        docker run --rm --platform linux/amd64 ${{ steps.vars.outputs.IMAGE_TEST }} php vendor/bin/phpcs
        docker run --rm --platform linux/amd64 ${{ steps.vars.outputs.IMAGE_TEST }} php vendor/bin/phpstan --memory-limit=512M analyse src tests
        docker run --rm --platform linux/amd64 ${{ steps.vars.outputs.IMAGE_TEST }} php vendor/bin/phpunit

        # run a detached container
        docker run --rm --platform linux/amd64 -d --name test -p 8250:8250 ${{ steps.vars.outputs.IMAGE_TEST }}
        
        # wait until container is healthy
        timeout 10s sh -c 'until docker ps | grep -w 'test' | grep -q healthy; do echo "Waiting for container to be healthy..."; sleep 1; done'
        sleep 1

        # try to see if it's available
        curl --silent http://localhost:8250 | grep "<h1>CMS</h1>" || (docker rm test --force; exit 1)

        # destroy the container
        docker rm test --force

    # - name: On test failure - Push test environment (for local testing)
    #   if: failure() && steps.tests.outcome == 'failure'
    #   uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
    #   with:
    #     push: true
    #     target: final_test
    #     tags: ${{ steps.vars.outputs.IMAGE_TEST }}
    #     platforms: linux/amd64
    #     cache-from: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-test_linux_amd64


    - if: ${{ inputs.DOCKER_PUSH == 1 && inputs.DOCKER_PUSH_LATEST != 1 }}
      name: Build + push production image (dev-main) (linux/amd64,linux/arm64)
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
      with:
        push: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD }}
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_amd64
          type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_arm64

    - if: ${{ inputs.DOCKER_PUSH == 1 && inputs.DOCKER_PUSH_LATEST == 1 }}
      name: Build + push production image (release + latest) (linux/amd64,linux/arm64)
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
      with:
        push: true
        target: final_prod
        tags: |
          ${{ steps.vars.outputs.IMAGE_PROD }}
          ${{ steps.vars.outputs.IMAGE_PROD_LATEST }}
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_amd64
          type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_arm64

    - if: ${{ inputs.DOCKER_PUSH == 1 }}
      name: Cache production image layers (prod_linux_amd64)
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
      with:
        load: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD }}
        platforms: linux/amd64
        cache-from: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_amd64
        cache-to: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_amd64,mode=max

    - if: ${{ inputs.DOCKER_PUSH == 1 }}
      name: Cache production image layers (prod_linux_arm64)
      uses: docker/build-push-action@67a2d409c0a876cbe6b11854e3e25193efe4e62d # https://github.com/docker/build-push-action/releases/tag/v6.12.0
      with:
        load: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD }}
        platforms: linux/arm64
        cache-from: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_arm64
        cache-to: type=registry,ref=${{ steps.vars.outputs.IMAGE_BUILD_CACHE }}-prod_linux_arm64,mode=max

